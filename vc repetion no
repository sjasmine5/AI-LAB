from termcolor import colored
import random

# Function to initialize the board with user-defined dirt cells
def initialize_board(n, dirt_positions):
    board = [[' ' for _ in range(n)] for _ in range(n)]
    for x, y in dirt_positions:
        if 0 <= x < n and 0 <= y < n:
            board[x][y] = 'D'
    return board

# Function to print the board with row and column numbers
def print_board(board, vacuum_position):
    n = len(board)
    print("    " + "   ".join([str(i + 1) for i in range(n)]))
    print("   +" + "---+" * n)
    for i, row in enumerate(board):
        row_display = []
        for j, cell in enumerate(row):
            if [i, j] == vacuum_position:
                row_display.append(colored('V', 'blue'))
            elif cell == 'D':
                row_display.append(colored(cell, 'red'))
            else:
                row_display.append(cell)
        print(f" {i + 1} | " + " | ".join(row_display) + " |")
        print("   +" + "---+" * n)

# Function to simulate the vacuum cleaner's movement
def vacuum_cleaner_simulation(n):
    # Get the dirt positions from the user
    dirt_positions = []
    print(f"Enter the coordinates for the dirt positions (1-{n} for both row and column).")
    while True:
        try:
            dirt_input = input("Enter dirt position as 'row col' or type 'done' to finish: ")
            if dirt_input.lower() == 'done':
                break
            row, col = map(int, dirt_input.split())
            if 1 <= row <= n and 1 <= col <= n:
                dirt_positions.append((row - 1, col - 1))
            else:
                print(f"Invalid input. Please enter values between 1 and {n}.")
        except ValueError:
            print("Invalid input. Please enter the dirt position as 'row col'.")
    
    # Initialize the board
    board = initialize_board(n, dirt_positions)
    
    # Set the initial vacuum position
    vacuum_position = [random.randint(0, n - 1), random.randint(0, n - 1)]
    print(f"Vacuum cleaner starts at position {vacuum_position[0] + 1}-{vacuum_position[1] + 1}")
    print("Initial Board:")
    print_board(board, vacuum_position)

    # Start visiting every cell in a systematic manner (row by row zigzag)
    steps = 0
    for i in range(n):
        if i % 2 == 0:  # Left to right on even rows
            for j in range(n):
                vacuum_position = [i, j]
                if board[i][j] == 'D':
                    board[i][j] = ' '
                    print(f"Cleaned dirt at position {i + 1}-{j + 1}.")
                steps += 1
                print(f"\nStep {steps}:")
                print_board(board, vacuum_position)
        else:  # Right to left on odd rows
            for j in range(n - 1, -1, -1):
                vacuum_position = [i, j]
                if board[i][j] == 'D':
                    board[i][j] = ' '
                    print(f"Cleaned dirt at position {i + 1}-{j + 1}.")
                steps += 1
                print(f"\nStep {steps}:")
                print_board(board, vacuum_position)

    print("The vacuum cleaner has visited every cell on the board!")

# Start the simulation
if __name__ == "__main__":
    n = int(input("Enter the size of the board (n x n): "))
    vacuum_cleaner_simulation(n)
